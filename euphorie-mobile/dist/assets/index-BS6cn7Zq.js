(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))i(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const d of t.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&i(d)}).observe(document,{childList:!0,subtree:!0});function o(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function i(e){if(e.ep)return;e.ep=!0;const t=o(e);fetch(e.href,t)}})();const b="modulepreload",P=function(n){return"/"+n},f={},w=function(r,o,i){let e=Promise.resolve();if(o&&o.length>0){let g=function(a){return Promise.all(a.map(u=>Promise.resolve(u).then(m=>({status:"fulfilled",value:m}),m=>({status:"rejected",reason:m}))))};var d=g;document.getElementsByTagName("link");const s=document.querySelector("meta[property=csp-nonce]"),c=s?.nonce||s?.getAttribute("nonce");e=g(o.map(a=>{if(a=P(a),a in f)return;f[a]=!0;const u=a.endsWith(".css"),m=u?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${a}"]${m}`))return;const l=document.createElement("link");if(l.rel=u?"stylesheet":b,u||(l.as="script"),l.crossOrigin="",l.href=a,c&&l.setAttribute("nonce",c),document.head.appendChild(l),u)return new Promise((y,h)=>{l.addEventListener("load",y),l.addEventListener("error",()=>h(new Error(`Unable to preload CSS for ${a}`)))})}))}function t(s){const c=new Event("vite:preloadError",{cancelable:!0});if(c.payload=s,window.dispatchEvent(c),!c.defaultPrevented)throw s}return e.then(s=>{for(const c of s||[])c.status==="rejected"&&t(c.reason);return r().catch(t)})};console.log("Euphorie AI Starting...");console.log("window.Capacitor:",window.Capacitor);console.log("window.CapacitorWebPlugin:",window.CapacitorWebPlugin);typeof window<"u"&&(console.log("Window is available"),window.Capacitor?(console.log("✅ Capacitor detected"),console.log("Platform:",window.Capacitor.getPlatform()),console.log("Native platform:",window.Capacitor.isNativePlatform()),console.log("Plugins available:",Object.keys(window.Capacitor.Plugins||{}))):(console.log("❌ Capacitor NOT detected"),console.log("Available globals:",Object.keys(window).filter(n=>n.toLowerCase().includes("cap")))));document.addEventListener("DOMContentLoaded",async function(){console.log("App loaded, performing diagnostics..."),await C(),v()});async function C(){if(console.log(`
=== CAPACITOR DIAGNOSTICS ===`),!window.Capacitor){console.log("❌ Capacitor not found in window object"),console.log("This suggests the app is running in browser mode, not Capacitor");return}const n=window.Capacitor.getPlatform();console.log("Platform:",n);const r=window.Capacitor.isNativePlatform();console.log("Is Native Platform:",r);try{if(console.log("Attempting to load Camera plugin..."),window.Capacitor.Plugins&&window.Capacitor.Plugins.Camera){console.log("✅ Camera plugin found in Capacitor.Plugins");try{const o=await window.Capacitor.Plugins.Camera.checkPermissions();console.log("Camera permissions status:",o)}catch(o){console.log("❌ Error checking permissions:",o)}}else console.log("❌ Camera plugin not found in Capacitor.Plugins"),console.log("Available plugins:",Object.keys(window.Capacitor.Plugins||{}));try{const{Camera:o}=await w(async()=>{const{Camera:e}=await import("./index-C-aZJvpO.js");return{Camera:e}},[]);console.log("✅ Camera module imported successfully"),console.log("Camera methods:",Object.getOwnPropertyNames(o));const i=await o.checkPermissions();console.log("Camera permissions via import:",i)}catch(o){console.log("❌ Failed to import Camera module:",o)}}catch(o){console.log("❌ Error during camera diagnostics:",o)}console.log(`=== END DIAGNOSTICS ===
`)}window.initializeApp=async function(){console.log(`
=== CAMERA TEST START ===`);const n=document.getElementById("camera-placeholder");if(!window.Capacitor){n.innerHTML=`
            <div style="text-align: center; color: #ff6b6b;">
                <h3>Capacitor Not Detected</h3>
                <p>The app is running in browser mode.</p>
                <p>Camera functionality requires a native app environment.</p>
                <button class="start-button" onclick="location.reload()">Refresh & Retry</button>
            </div>
        `;return}try{if(console.log("Attempting camera access..."),window.Capacitor.Plugins&&window.Capacitor.Plugins.Camera){console.log("Using Capacitor.Plugins.Camera");const t=await window.Capacitor.Plugins.Camera.getPhoto({quality:80,allowEditing:!1,resultType:"Base64",source:"Camera"});console.log("✅ Photo captured via Capacitor.Plugins"),p("Success! Photo captured via Capacitor.Plugins.Camera",t.base64String);return}console.log("Trying dynamic import method...");const{Camera:r,CameraResultType:o,CameraSource:i}=await w(async()=>{const{Camera:t,CameraResultType:d,CameraSource:s}=await import("./index-C-aZJvpO.js");return{Camera:t,CameraResultType:d,CameraSource:s}},[]);console.log("Camera module imported, attempting getPhoto...");const e=await r.getPhoto({quality:80,allowEditing:!1,resultType:o.Base64,source:i.Camera});console.log("✅ Photo captured via dynamic import"),p("Success! Photo captured via dynamic import",e.base64String)}catch(r){console.log("❌ Camera test failed:",r),p("Camera Test Failed",null,r.message)}console.log(`=== CAMERA TEST END ===
`)};function p(n,r,o){const i=document.getElementById("camera-placeholder");let e=`
        <div style="text-align: center;">
            <h3 style="color: ${o?"#ff6b6b":"#00ff88"};">${n}</h3>
    `;r&&(e+=`
            <img src="data:image/jpeg;base64,${r}" 
                 style="max-width: 90%; max-height: 300px; object-fit: contain; border-radius: 8px; margin: 1rem 0;">
        `),o&&(e+=`
            <div style="background: rgba(255,107,107,0.1); padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                <p style="color: #ff6b6b; font-family: monospace; font-size: 0.9rem;">${o}</p>
            </div>
        `),e+=`
            <div style="margin-top: 1rem;">
                <button class="start-button" onclick="initializeApp()">
                    Try Again
                </button>
                <button class="start-button" onclick="performDiagnostics()" style="margin-left: 1rem; background: rgba(0,153,255,0.8);">
                    Run Diagnostics
                </button>
            </div>
        </div>
    `,i.innerHTML=e}async function v(){const n=document.getElementById("status-indicator");try{n.textContent="Capacitor Debug Mode",n.className="status-indicator connected"}catch{n.textContent="Debug mode",n.className="status-indicator disconnected"}}window.performDiagnostics=C;
